/* tslint:disable */
/* eslint-disable */
/**
 * LazyBlog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentResponseListResult,
  CreatePostRequest,
  PostDetailedResponseResult,
  PostResponseResult,
  ProblemDetails,
  PublishedPostResponseListResult,
  UpdatePostRequest,
  UserPostResponseResult,
  VoteDirection,
} from '../models/index';
import {
    CommentResponseListResultFromJSON,
    CommentResponseListResultToJSON,
    CreatePostRequestFromJSON,
    CreatePostRequestToJSON,
    PostDetailedResponseResultFromJSON,
    PostDetailedResponseResultToJSON,
    PostResponseResultFromJSON,
    PostResponseResultToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PublishedPostResponseListResultFromJSON,
    PublishedPostResponseListResultToJSON,
    UpdatePostRequestFromJSON,
    UpdatePostRequestToJSON,
    UserPostResponseResultFromJSON,
    UserPostResponseResultToJSON,
    VoteDirectionFromJSON,
    VoteDirectionToJSON,
} from '../models/index';

export interface ApiPostsGetRequest {
    offset?: number;
}

export interface ApiPostsIdCommentsGetRequest {
    id: string;
}

export interface ApiPostsIdCountViewPutRequest {
    id: string;
}

export interface ApiPostsIdDeleteRequest {
    id: string;
}

export interface ApiPostsIdGetRequest {
    id: string;
}

export interface ApiPostsIdHidePutRequest {
    id: string;
}

export interface ApiPostsIdPublishPutRequest {
    id: string;
}

export interface ApiPostsIdPutRequest {
    id: string;
    updatePostRequest?: UpdatePostRequest;
}

export interface ApiPostsIdVotePutRequest {
    id: string;
    direction?: VoteDirection;
}

export interface ApiPostsPostRequest {
    createPostRequest?: CreatePostRequest;
}

export interface ApiPostsSlugGetRequest {
    slug: string;
}

export interface ApiPostsTTagGetRequest {
    tag: string;
}

export interface ApiPostsUserNamePostsGetRequest {
    userName: string;
    offset?: number;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     */
    async apiPostsGetRaw(requestParameters: ApiPostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishedPostResponseListResult>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishedPostResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsGet(requestParameters: ApiPostsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishedPostResponseListResult> {
        const response = await this.apiPostsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsIdCommentsGetRaw(requestParameters: ApiPostsIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponseListResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdCommentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsIdCommentsGet(requestParameters: ApiPostsIdCommentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponseListResult> {
        const response = await this.apiPostsIdCommentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsIdCountViewPutRaw(requestParameters: ApiPostsIdCountViewPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdCountViewPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}/count-view`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdCountViewPut(requestParameters: ApiPostsIdCountViewPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdCountViewPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsIdDeleteRaw(requestParameters: ApiPostsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdDelete(requestParameters: ApiPostsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsIdGetRaw(requestParameters: ApiPostsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResponseResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsIdGet(requestParameters: ApiPostsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResponseResult> {
        const response = await this.apiPostsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsIdHidePutRaw(requestParameters: ApiPostsIdHidePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdHidePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}/hide`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdHidePut(requestParameters: ApiPostsIdHidePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdHidePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsIdPublishPutRaw(requestParameters: ApiPostsIdPublishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdPublishPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}/publish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdPublishPut(requestParameters: ApiPostsIdPublishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdPublishPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsIdPutRaw(requestParameters: ApiPostsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePostRequestToJSON(requestParameters['updatePostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdPut(requestParameters: ApiPostsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsIdVotePutRaw(requestParameters: ApiPostsIdVotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPostsIdVotePut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}/vote`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPostsIdVotePut(requestParameters: ApiPostsIdVotePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPostsIdVotePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPostsPostRaw(requestParameters: ApiPostsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostRequestToJSON(requestParameters['createPostRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiPostsPost(requestParameters: ApiPostsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiPostsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsSlugGetRaw(requestParameters: ApiPostsSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDetailedResponseResult>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling apiPostsSlugGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDetailedResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsSlugGet(requestParameters: ApiPostsSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDetailedResponseResult> {
        const response = await this.apiPostsSlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsTTagGetRaw(requestParameters: ApiPostsTTagGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishedPostResponseListResult>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling apiPostsTTagGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/t/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishedPostResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsTTagGet(requestParameters: ApiPostsTTagGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishedPostResponseListResult> {
        const response = await this.apiPostsTTagGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPostsUserNamePostsGetRaw(requestParameters: ApiPostsUserNamePostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPostResponseResult>> {
        if (requestParameters['userName'] == null) {
            throw new runtime.RequiredError(
                'userName',
                'Required parameter "userName" was null or undefined when calling apiPostsUserNamePostsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{userName}/posts`.replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters['userName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPostResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPostsUserNamePostsGet(requestParameters: ApiPostsUserNamePostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPostResponseResult> {
        const response = await this.apiPostsUserNamePostsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
