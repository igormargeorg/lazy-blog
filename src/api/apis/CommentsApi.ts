/* tslint:disable */
/* eslint-disable */
/**
 * LazyBlog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCommentRequest,
  ProblemDetails,
  UpdateCommentRequest,
} from '../models/index';
import {
    AddCommentRequestFromJSON,
    AddCommentRequestToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateCommentRequestFromJSON,
    UpdateCommentRequestToJSON,
} from '../models/index';

export interface ApiCommentsIdDeleteRequest {
    id: string;
}

export interface ApiCommentsIdGetRequest {
    id: string;
}

export interface ApiCommentsPostRequest {
    addCommentRequest?: AddCommentRequest;
}

export interface ApiCommentsPutRequest {
    updateCommentRequest?: UpdateCommentRequest;
}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI {

    /**
     */
    async apiCommentsIdDeleteRaw(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsIdDelete(requestParameters: ApiCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsIdGetRaw(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsIdGet(requestParameters: ApiCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsPostRaw(requestParameters: ApiCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCommentRequestToJSON(requestParameters['addCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsPost(requestParameters: ApiCommentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsPutRaw(requestParameters: ApiCommentsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCommentRequestToJSON(requestParameters['updateCommentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsPut(requestParameters: ApiCommentsPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsPutRaw(requestParameters, initOverrides);
    }

}
