/* tslint:disable */
/* eslint-disable */
/**
 * LazyBlog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  TagResponseListResult,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TagResponseListResultFromJSON,
    TagResponseListResultToJSON,
} from '../models/index';

export interface ApiTagsIdPutRequest {
    id: string;
    tag?: string;
}

export interface ApiTagsSearchTermGetRequest {
    searchTerm: string;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     */
    async apiTagsIdPutRaw(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTagsIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTagsIdPut(requestParameters: ApiTagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTagsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTagsSearchTermGetRaw(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagResponseListResult>> {
        if (requestParameters['searchTerm'] == null) {
            throw new runtime.RequiredError(
                'searchTerm',
                'Required parameter "searchTerm" was null or undefined when calling apiTagsSearchTermGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/tags/{searchTerm}`.replace(`{${"searchTerm"}}`, encodeURIComponent(String(requestParameters['searchTerm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiTagsSearchTermGet(requestParameters: ApiTagsSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagResponseListResult> {
        const response = await this.apiTagsSearchTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
